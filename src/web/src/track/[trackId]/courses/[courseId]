import { useState, useEffect } from "react";
import Image from "next/image";
import Link from "next/link";
import { useRouter } from "next/router";
import Head from "next/head";
import axios from "axios";
import Logo from "../../Assets/logo.svg";

const TrackDetail = () => {
  const router = useRouter();
  const { trackId, courseId } = router.query;
  
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [userData, setUserData] = useState({
    name: "",
    cohort: "",
    track: "",
    trackId: "",
    studentId: "",
  });
  
  const [trackData, setTrackData] = useState({
    name: "",
    description: "",
    courses: []
  });
  
  const [currentCourseIndex, setCurrentCourseIndex] = useState(0);
  const [videoError, setVideoError] = useState(false);

  useEffect(() => {
    if (trackId) {
      const token = localStorage.getItem("token");
      
      if (!token) {
        router.push("/login");
        return;
      }
      
      fetchTrackData();
    }
  }, [trackId, router]);

  useEffect(() => {
    // When courses are loaded, find the current course index
    if (trackData.courses.length > 0 && courseId) {
      const index = trackData.courses.findIndex(course => course.course_id === courseId);
      if (index !== -1) {
        setCurrentCourseIndex(index);
      }
    }
  }, [trackData.courses, courseId]);

  const fetchTrackData = async () => {
    try {
      setLoading(true);
      const token = localStorage.getItem("token");
      
      if (!token) {
        throw new Error("Authentication required");
      }
      
      // Get user ID from token or localStorage
      const userId = localStorage.getItem("userId") || getUserIdFromToken(token);
      
      if (!userId) {
        throw new Error("Invalid authentication token");
      }
      
      // Store userId in localStorage if not already there
      if (!localStorage.getItem("userId")) {
        localStorage.setItem("userId", userId);
      }
      
      try {
        // Fetch user data
        const userResponse = await axios.get(
          `${process.env.NEXT_PUBLIC_API_ROUTE}students/${userId}`,
          { headers: { Authorization: `Bearer ${token}` } }
        );
        
        setUserData({
          name: userResponse.data.full_name || "",
          cohort: ensureSafeRender(userResponse.data.cohort) || "",
          track: userResponse.data.track ? ensureSafeRender(userResponse.data.track) : "",
          trackId: trackId,
          studentId: userId,
        });
        
        // Fetch track data
        const trackResponse = await axios.get(
          `${process.env.NEXT_PUBLIC_API_ROUTE}tracks/${trackId}`,
          { headers: { Authorization: `Bearer ${token}` } }
        );
        
        if (!trackResponse.data) {
          throw new Error("Track not found");
        }
        
        // Sort courses by order if available
        const sortedCourses = trackResponse.data.courses.sort((a, b) => {
          if (a.order && b.order) {
            return a.order - b.order;
          }
          return 0;
        });
        
        setTrackData({
          name: trackResponse.data.name || "Track",
          description: trackResponse.data.description || "",
          courses: sortedCourses || []
        });
        
        // If no courseId is specified in URL, update the URL with the first course
        if (!courseId && sortedCourses.length > 0) {
          router.replace(`/track/${trackId}/courses/${sortedCourses[0].course_id}`, undefined, { shallow: true });
        }
      } catch (error) {
        console.error("Error in data fetching flow:", error);
        setError("Could not retrieve your track information. Please return to dashboard and try again.");
      }
    } catch (err) {
      console.error("Overall error:", err);
      
      if (err.response && err.response.status === 401) {
        // Token expired
        localStorage.removeItem("token");
        localStorage.removeItem("refreshToken");
        router.push("/login");
        return;
      }
      
      setError(err.message || "Failed to load track data");
    } finally {
      setLoading(false);
    }
  };
  
  // Helper function for safe rendering
  const ensureSafeRender = (value) => {
    if (value === null || value === undefined) {
      return '';
    }
    if (typeof value === 'object') {
      if (value.name) {
        return value.name; 
      }
      return JSON.stringify(value); 
    }
    return value;
  };

  // Helper function to extract user ID from token
  const getUserIdFromToken = (token) => {
    try {
      // JWT tokens are in format: header.payload.signature
      const parts = token.split('.');
      
      if (parts.length !== 3) {
        console.error("Invalid token format");
        return null;
      }
      
      const payload = parts[1];
      
      // Base64 decode the payload
      const base64 = payload.replace(/-/g, '+').replace(/_/g, '/');
      const decodedPayload = JSON.parse(atob(base64));
      
      return decodedPayload.user_id;
    } catch (error) {
      console.error("Error decoding token:", error);
      return null;
    }
  };
  
  // Function to navigate to the next course
  const goToNextCourse = () => {
    if (currentCourseIndex < trackData.courses.length - 1) {
      const nextCourse = trackData.courses[currentCourseIndex + 1];
      router.push(`/track/${trackId}/courses/${nextCourse.course_id}`);
    }
  };
  
  // Function to navigate to the previous course
  const goToPreviousCourse = () => {
    if (currentCourseIndex > 0) {
      const prevCourse = trackData.courses[currentCourseIndex - 1];
      router.push(`/track/${trackId}/courses/${prevCourse.course_id}`);
    }
  };
  
  // Function to check if a URL is a YouTube link
  const isYouTubeLink = (url) => {
    if (!url) return false;
    return url.includes('youtube.com') || url.includes('youtu.be');
  };
  
  // Function to check if a URL is a Google Drive link
  const isGoogleDriveLink = (url) => {
    if (!url) return false;
    return url.includes('drive.google.com');
  };
  
  // Function to extract YouTube video ID from various URL formats
  const extractYouTubeId = (url) => {
    if (!url) return null;
    
    // Handle different YouTube URL formats
    const patterns = [
      // Standard watch URLs
      /(?:youtube\.com\/(?:watch\?(?:.*&)?v=|embed\/|v\/)|youtu\.be\/)([\w-]{11})/i,
      // Short URLs
      /(?:youtu\.be\/)([\w-]{11})/i,
      // Embed URLs
      /(?:youtube\.com\/embed\/)([\w-]{11})/i,
      // YouTube Shorts
      /(?:youtube\.com\/shorts\/)([\w-]{11})/i
    ];
    
    for (const pattern of patterns) {
      const match = url.match(pattern);
      if (match && match[1]) {
        return match[1];
      }
    }
    
    return null;
  };
  
  // Function to convert Google Drive view links to embed links
  const getGoogleDriveEmbedLink = (url) => {
    if (!url) return null;
    
    // Extract the file ID from Google Drive link
    const fileIdMatch = url.match(/[-\w]{25,}/);
    if (fileIdMatch && fileIdMatch[0]) {
      return `https://drive.google.com/file/d/${fileIdMatch[0]}/preview`;
    }
    
    return url;
  };
  
  // Function to handle iframe load errors
  const handleVideoError = () => {
    setVideoError(true);
  };
  
  // Current course being displayed
  const currentCourse = trackData.courses[currentCourseIndex] || null;

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-N50">
        <div className="text-center">
          <div className="animate-spin rounded-full h-32 w-32 border-t-4 border-b-4 border-P300 mx-auto"></div>
          <p className="mt-16 font-medium text-N300">Loading track content...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-N50">
        <div className="bg-N00 p-24 rounded-lg shadow-xl max-w-md w-full">
          <div className="text-center text-R300 mb-16">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-32 w-32 mx-auto" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
          </div>
          <h3 className="text-xl font-bold text-N500 mb-8">Error Loading Track</h3>
          <p className="text-N300 mb-16">{error}</p>
          <Link href="/dashboard">
            <button className="w-full bg-P300 text-N00 py-12 px-24 rounded-lg hover:bg-P200 transition duration-300 font-semibold">
              Back to Dashboard
            </button>
          </Link>
        </div>
      </div>
    );
  }

  if (!currentCourse) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-N50">
        <div className="bg-N00 p-24 rounded-lg shadow-xl max-w-md w-full">
          <div className="text-center text-R300 mb-16">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-32 w-32 mx-auto" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
          </div>
          <h3 className="text-xl font-bold text-N500 mb-8">Course Not Found</h3>
          <p className="text-N300 mb-16">The requested course could not be found in this track.</p>
          <Link href="/dashboard">
            <button className="w-full bg-P300 text-N00 py-12 px-24 rounded-lg hover:bg-P200 transition duration-300 font-semibold">
              Back to Dashboard
            </button>
          </Link>
        </div>
      </div>
    );
  }

  return (
    <>
      <Head>
        <title>{trackData.name} | Milsat Aspirant Program</title>
      </Head>
      
      <div className="min-h-screen bg-N50">
        {/* Header/Navigation */}
        <header className="bg-N00 shadow-xl">
          <div className="container mx-auto px-16 lg:px-48">
            <div className="flex items-center justify-between py-16">
              <Link href="/dashboard">
                <div className="inline-block">
                  <Image src={Logo} alt="MAP-logo" className="h-auto w-auto" />
                </div>
              </Link>
              
              <div className="flex items-center">
                <Link href="/dashboard" className="text-sm text-P300 hover:text-P200 font-medium">
                  Back to Dashboard
                </Link>
              </div>
            </div>
          </div>
        </header>
        
        {/* Main Content */}
        <main className="container mx-auto px-16 lg:px-48 py-32">
          {/* Track Header */}
          <div className="bg-P300 text-N00 rounded-lg p-24 mb-32 shadow-card">
            <h1 className="text-xl font-bold mb-8">{trackData.name}</h1>
            <p className="text-sm opacity-90">{trackData.description}</p>
          </div>
          
          {/* Course Progress Indicator */}
          <div className="mb-24">
            <div className="flex items-center justify-between">
              <h2 className="text-lg font-bold text-N500">
                Course {currentCourseIndex + 1} of {trackData.courses.length}
              </h2>
              <div className="text-sm text-N300">
                Progress: {Math.round(((currentCourseIndex + 1) / trackData.courses.length) * 100)}%
              </div>
            </div>
            <div className="mt-8 w-full bg-N100 rounded-full h-8">
              <div 
                className="bg-P300 h-8 rounded-full" 
                style={{ width: `${((currentCourseIndex + 1) / trackData.courses.length) * 100}%` }}
              ></div>
            </div>
          </div>
          
          {/* Course Navigation */}
          <div className="flex justify-between mb-24">
            <button 
              onClick={goToPreviousCourse} 
              disabled={currentCourseIndex === 0}
              className={`flex items-center px-16 py-8 rounded-lg ${
                currentCourseIndex === 0 
                  ? 'bg-N100 text-N200 cursor-not-allowed' 
                  : 'bg-N200 text-N00 hover:bg-N300'
              }`}
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-16 w-16 mr-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
              </svg>
              Previous Course
            </button>
            
            <button 
              onClick={goToNextCourse} 
              disabled={currentCourseIndex === trackData.courses.length - 1}
              className={`flex items-center px-16 py-8 rounded-lg ${
                currentCourseIndex === trackData.courses.length - 1 
                  ? 'bg-N100 text-N200 cursor-not-allowed' 
                  : 'bg-P300 text-N00 hover:bg-P200'
              }`}
            >
              Next Course
              <svg xmlns="http://www.w3.org/2000/svg" className="h-16 w-16 ml-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
              </svg>
            </button>
          </div>
          
          {/* Course Content Card */}
          <div className="bg-N00 rounded-lg shadow-xl mb-32">
            <div className="p-24">
              {/* Course Title and Description */}
              <div className="mb-24">
                <h3 className="text-xl font-bold text-N500 mb-8">{currentCourse.name}</h3>
                <p className="text-sm text-N300 mb-16">{currentCourse.description}</p>
                
                {currentCourse.requirements && (
                  <div className="bg-N50 p-16 rounded-lg mb-16">
                    <h4 className="text-sm font-semibold text-N500 mb-8">Requirements</h4>
                    <p className="text-sm text-N300">{currentCourse.requirements}</p>
                  </div>
                )}
              </div>
              
              {/* Course Content */}
              <div className="mb-24">
                <h4 className="text-base font-semibold text-N500 mb-16">Course Content</h4>
                
                {currentCourse.access_link ? (
                  <div className="mt-16">
                    {/* YouTube Video */}
                    {isYouTubeLink(currentCourse.access_link) && (
                      <div className="aspect-video mb-16">
                        <iframe
                          className="w-full h-full rounded-lg"
                          src={`https://www.youtube.com/embed/${extractYouTubeId(currentCourse.access_link)}`}
                          title={currentCourse.name}
                          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                          allowFullScreen
                          onError={handleVideoError}
                        ></iframe>
                      </div>
                    )}
                    
                    {/* Google Drive Embed */}
                    {isGoogleDriveLink(currentCourse.access_link) && (
                      <div className="aspect-video mb-16">
                        <iframe
                          className="w-full h-full rounded-lg"
                          src={getGoogleDriveEmbedLink(currentCourse.access_link)}
                          title={currentCourse.name}
                          allow="autoplay"
                          onError={handleVideoError}
                        ></iframe>
                      </div>
                    )}
                    
                    {/* Other Links */}
                    {!isYouTubeLink(currentCourse.access_link) && !isGoogleDriveLink(currentCourse.access_link) && (
                      <div className="bg-N50 p-16 rounded-lg mb-16">
                        <h4 className="text-sm font-semibold text-N500 mb-8">Access Resource</h4>
                        <a 
                          href={currentCourse.access_link} 
                          target="_blank" 
                          rel="noopener noreferrer"
                          className="flex items-center p-12 bg-P50 text-P300 hover:bg-P100 rounded-lg transition"
                        >
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-16 w-16 mr-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                          </svg>
                          Access Course Material
                        </a>
                      </div>
                    )}
                  </div>
                ) : (
                  <div className="bg-N50 p-16 rounded-lg text-center">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-32 w-32 mx-auto text-N200 mb-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    <p className="text-N300">No content link available for this course.</p>
                  </div>
                )}
              </div>
            </div>
          </div>
          
          {/* Course List - All courses in this track */}
          <div className="bg-N00 rounded-lg shadow-xl mb-32">
            <div className="p-24">
              <h3 className="text-lg font-bold text-N500 mb-16">All Courses in this Track</h3>
              
              <div className="space-y-8">
                {trackData.courses.map((course, index) => (
                  <Link 
                    href={`/track/${trackId}/courses/${course.course_id}`}
                    key={course.course_id}
                  >
                    <div className={`p-16 rounded-lg transition ${
                      course.course_id === currentCourse.course_id
                        ? 'bg-P50 border-l-4 border-P300'
                        : 'bg-N50 hover:bg-N100'
                    }`}>
                      <div className="flex items-center">
                        <div className={`w-32 h-32 rounded-full flex items-center justify-center text-sm mr-12 ${
                          course.course_id === currentCourse.course_id
                            ? 'bg-P300 text-N00'
                            : 'bg-N200 text-N00'
                        }`}>
                          {index + 1}
                        </div>
                        <div>
                          <h4 className={`font-medium ${
                            course.course_id === currentCourse.course_id
                              ? 'text-P300'
                              : 'text-N500'
                          }`}>
                            {course.name}
                          </h4>
                          <p className="text-xs text-N300 truncate">{course.description}</p>
                        </div>
                      </div>
                    </div>
                  </Link>
                ))}
              </div>
            </div>
          </div>
        </main>
        
        {/* Footer */}
        <footer className="bg-N500 text-N00 py-32">
          <div className="container mx-auto px-16 lg:px-48">
            <div className="flex flex-col md:flex-row justify-between items-center">
              <div className="mb-24 md:mb-0">
                <Image src={Logo} alt="MAP-logo" className="h-auto w-auto" />
                <p className="text-xs text-N100 mt-8">© 2025 Milsat Aspirant Program. All rights reserved.</p>
              </div>
              
              <div className="flex space-x-16">
                <Link href="/dashboard" className="text-sm text-N100 hover:text-N00">Dashboard</Link>
                <Link href="/courses" className="text-sm text-N100 hover:text-N00">Courses</Link>
                <Link href="/support" className="text-sm text-N100 hover:text-N00">Support</Link>
              </div>
            </div>
          </div>
        </footer>
      </div>
    </>
  );
};

export default TrackDetail;