name: Deploy map-api to ECS

on:
  workflow_dispatch:
    inputs:
      awsRegion:
        description: 'AWS Region'
        required: true
        type: string
      repo-name:
        description: 'Repo Name'
        required: true
        type: string
      ecsServiceName:
        description: 'ECS Service Name'
        required: true
        type: string
      ecsClusterName:
        description: 'ECS Cluster Name'
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ github.event.inputs.awsRegion }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and Push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        cd src/apis
        docker build -t ${{ github.event.inputs.repo-name }} .
        docker tag ${{ github.event.inputs.repo-name }}:latest 282421455628.dkr.ecr.us-east-1.amazonaws.com/${{ github.event.inputs.repo-name }}:latest
        docker push 282421455628.dkr.ecr.us-east-1.amazonaws.com/${{ github.event.inputs.repo-name }}:latest

    - name: Update ECS service
      run: | 
        aws ecs update-service --service ${{ github.event.inputs.ecsServiceName }} --task-definition ${{ github.event.inputs.ecsServiceName }} --desired-count 1 --cluster ${{ github.event.inputs.ecsClusterName }}
